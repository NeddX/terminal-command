use std::thread::sleep;
use std::time::Duration;

mod snake {
    use crossterm::{
        cursor,
        terminal::{self, ClearType},
        ExecutableCommand,
        event::{self, Event, KeyCode, KeyEvent, KeyModifiers}
    };
    use std::io::{self, Write};
    use std::time::{Duration, Instant};
    use rand::Rng;

    pub const MAX_TAIL_SIZE: usize = 255;
    pub const WIDTH: usize = 30 * 2;
    pub const HEIGHT: usize = 30;
    pub const WALL: u8 = b'#';
    pub const FLOOR: u8 = b' ';
    pub const SNAKE_HEAD: u8 = b'@';
    pub const SNAKE_BODY: u8 = b'o';
    pub const SNAKE_SKULL: u8 = b'X';
    pub const SNAKE_BONE: u8 = b'+';
    pub const FRUIT: u8 = b'*';

    #[derive(Copy, Clone)]
    pub struct Vector2 {
        x: i32,
        y: i32
    }

    impl Vector2 {
        pub fn new(x: i32, y: i32) -> Self {
            Vector2 {
                x: x,
                y: y
            }
        }

        pub fn zero() -> Self {
            Vector2 {
                x: 0,
                y: 0
            }
        }
    }

    #[derive(Copy, Clone)]
    pub enum Direction {
        Up,
        Down,
        Left,
        Right,
        None
    }

    #[derive(Copy, Clone)]
    struct Segment {
        dir: Direction,
        pos: Vector2
    }

    impl Segment {
        fn new(dir: Direction, pos: Vector2) -> Self {
            Segment {
                dir: dir,
                pos: pos
            }
        }
    }

    #[derive(Copy, Clone)]
    struct Player {
        dir: Direction,
        p_dir: Direction,
        pos: Vector2,
        score: u32,
        high_score: u32,
        tail_size: u32,
        tail: [Segment; MAX_TAIL_SIZE]
    }

    impl Player {
        fn new(dir: Direction, pos: Vector2, tail_size: u32) -> Self {
            let mut inst = Player {
                dir: dir,
                p_dir: dir,
                pos: pos,
                score: 0,
                tail_size: tail_size,
                high_score: 0,
                tail: [Segment::new(dir, Vector2::zero()); MAX_TAIL_SIZE]
            };

            for (i, e) in inst.tail.iter_mut().enumerate() {
                if i as u32 >= inst.tail_size {
                    break;
                }

                e.dir = dir;
                e.pos.x = inst.pos.x;
                e.pos.y = inst.pos.y + (i as i32) + 1;
            }

            return inst;
        }
    }

    pub struct Game {
        player: Player,
        fruit: Vector2,
        dead: bool,
        run: bool,
        map: [u8; WIDTH * HEIGHT],
        delay: u32,
        disposed: bool
    }

    impl Game {
        pub fn new(player_dir: Direction,
                   player_pos: Vector2,
                   tail_size: u32,
                   fruit_pos:
                   Vector2,
                   delay: u32) -> Self {
            // Enable raw mode and hide the cursor.
            terminal::enable_raw_mode().unwrap();
            io::stdout().execute(cursor::Hide).unwrap();

            return Game {
                player: Player::new(player_dir, player_pos, tail_size),
                fruit: fruit_pos,
                dead: false,
                run: true,
                map: [0; WIDTH * HEIGHT],
                delay: delay,
                disposed: false,
            };
        }

        fn dispose(&mut self) {
            if !self.disposed {
                let mut stdout = io::stdout();
                stdout.execute(terminal::Clear(ClearType::All)).unwrap();
                stdout.execute(cursor::MoveTo(0, 0)).unwrap();
                terminal::disable_raw_mode().unwrap();
                io::stdout().execute(cursor::Show).unwrap();
                self.disposed = true;
            }
        }

        // Getters & Setters
        pub fn player(&self) -> &Player {
            return &self.player;
        }

        pub fn fruit(&self) -> &Vector2 {
            return &self.fruit;
        }

        pub fn dead(&self) -> &bool {
            return &self.dead;
        }

        pub fn run(&self) -> &bool {
            return &self.run;
        }

        pub fn map(&self) -> &[u8; WIDTH * HEIGHT] {
            return &self.map;
        }

        // Methods
        fn render (&self) {
            let mut stdout = io::stdout();

            stdout.execute(terminal::Clear(ClearType::All)).unwrap();
            stdout.execute(cursor::MoveTo(0, 0)).unwrap();

            for i in 0..WIDTH * HEIGHT {
                print!("{}", self.map[i] as char);
                if (i + 1) % WIDTH == 0 {
                    stdout.execute(cursor::MoveTo(0, ((i + 1) / WIDTH) as u16)).unwrap();
                }
            }
       }

        fn handle_input(&mut self) {
            if event::poll(Duration::from_millis(self.delay as u64)).unwrap() {
                let e = event::read().unwrap();
                if let event::Event::Key(key_event) = e {
                        if key_event.kind != event::KeyEventKind::Press {
                            return;
                        }
                        match key_event.code {
                            KeyCode::Char('q') => self.run = false,
                            KeyCode::Char('w') => {
                                if self.player.pos.y > 1 {
                                    self.player.pos.y -= 1;
                                }
                            },
                            KeyCode::Char('a') => {
                                if self.player.pos.x > 1 {
                                    self.player.pos.x -= 1;
                                }
                            },
                            KeyCode::Char('s') => {
                                if self.player.pos.y < (HEIGHT - 2) as i32 {
                                    self.player.pos.y += 1;
                                }
                            },
                            KeyCode::Char('d') => {
                                if self.player.pos.x < (WIDTH - 2) as i32 {
                                    self.player.pos.x += 1;
                                }
                            },
                            _ => {  }
                        }
                }
            }
        }

        pub fn update(&mut self) {
            for y in 0..HEIGHT {
                for x in 0..WIDTH {
                    if y == 0 || y == HEIGHT - 1 {
                        self.map[y * WIDTH + x] = WALL;
                    }
                    else if x == 0 || x == WIDTH - 1 {
                        self.map[y * WIDTH + x] = WALL;
                    }
                    else {
                        self.map[y * WIDTH + x] = FLOOR;
                    }
                }
            }

            // Draw the fruit
            self.map[self.fruit.y as usize * WIDTH + self.fruit.x as usize] = FRUIT;

            // Draw the snake head
            self.map[self.player.pos.y as usize * WIDTH + self.player.pos.x as usize] = SNAKE_HEAD;

            // Input
            self.handle_input();

            // Render
            self.render();
        }
    }

    impl Drop for Game {
        fn drop(&mut self) {
            // Call dispose upon destruction.
            self.dispose();
        }
    }
} // mod snake

fn main() {
    let mut game_instance = snake::Game::new(
        snake::Direction::Up,
        snake::Vector2::new((snake::WIDTH / 2) as i32, (snake::HEIGHT / 2) as i32),
        4,
        snake::Vector2::new((snake::WIDTH / 3) as i32, (snake::HEIGHT / 4) as i32),
        10
    );

    while *game_instance.run() {
        game_instance.update();
    }
}
